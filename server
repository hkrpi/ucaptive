#!/usr/bin/python
# -*- coding: utf-8 -*-

import BaseHTTPServer
import cgi
import datetime
import json
import os
import psutil
import subprocess
import subprocess
import sys
import threading
import time

HOST_NAME = '0.0.0.0'
PORT_NUMBER = 6890
TIME_LIMIT = 3600
SERVER_URL = "http://10.68.9.1:6890"
MAX_CLIENT_LIMIT = 5
GC_INTERVAL = 300
ADMIN_PASSWORD = "qwertyu"

ARP_CLIENTS = {}

timer = None

def get_dhcp_leases():
	result = subprocess.Popen("/usr/bin/dumpleases -a", stdout=subprocess.PIPE, shell=True)
	result.stdout.readline()
	line = result.stdout.readline()
	table = []
	while line:
		leases = {}
		arr = line.split()
		leases['mac'] = arr[0]
		leases['ip'] = arr[1]
		leases['hostname'] = arr[2]
		leases['expire'] = ' '.join(arr[3:])
		table.append(leases)
		line = result.stdout.readline()
	return table

def server_status_app(environ, start_response):
	if environ['PATH_INFO'] == '/api/server_status':
		return handle_server_status_request(environ, start_response)
	else:
		return handle_webpage_request(environ, start_response)

def LOG(s):
    print s
    s = str(s).replace("\n", "\\n")
    fp = open("log.txt", "a")
    fp.write(str(datetime.datetime.now()) + ": " + s + "\n")
    fp.close()

class Client:
    def __init__(self, arp, ip):
        self.arp = arp
        self.ip = ip
        self.start_time = datetime.datetime.now()

    def is_expired(self):
        return (datetime.datetime.now() - self.start_time).total_seconds() > TIME_LIMIT

    def remaining(self):
        return TIME_LIMIT - (datetime.datetime.now() - self.start_time).total_seconds()

class ClientManager:
    def __init__(self):
        self.clients = {}
        self.lock = threading.RLock()
        subprocess.call("./initialize_rules")
    def count(self):
        with self.lock:
            return len(self.clients)

    def gc(self):
        LOG("gc...")
        timer = threading.Timer(GC_INTERVAL, clientManager.gc)
        timer.start()

        with self.lock:
            to_remove = []
            for arp, client in self.clients.iteritems():
                if client.is_expired():
                    to_remove.append(arp)

            for client_arp in to_remove:
                LOG("expiring %s %s" % (client.arp, client.ip))
                subprocess.call("./expire_ip %s" % client.ip, shell=True)
                del self.clients[client_arp]

    def add(self, arp, ip):
        with self.lock:
            if len(self.clients) + 1> MAX_CLIENT_LIMIT: return
            client = Client(arp, ip)
            if arp not in self.clients:
                self.clients[arp] = Client(arp, ip)
                # Do not wait to return.
                subprocess.Popen("./allow_ip %s" % ip, shell=True)
            return self.clients[arp]

    def find_ip(self, ip):
        with self.lock:
            for arp, client in self.clients.iteritems():
                if client.ip == ip:
                    return client
            return False


clientManager = ClientManager()

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GetStatus(s):
        s.send_response(200)
        s.send_header("Content-type", "text/plain")
        s.end_headers()
        result = {}
        result['hostname'] = subprocess.Popen("/bin/hostname", stdout=subprocess.PIPE, shell=True).stdout.readline().strip()
        result['datetime'] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S%Z")
        result['dhcp_leases'] = get_dhcp_leases()
        result['cpu_times'] = psutil.cpu_times()
        result['virtual_memory'] = psutil.phymem_usage()
        #result['disk_partitions'] = psutil.disk_partitions()
        result['disk_usage'] = psutil.disk_usage("/")
        result['disk_io_counters']= psutil.disk_io_counters()
        result['network_io_counters']= psutil.network_io_counters(pernic=True)
        #result['net_connections'] = psutil.net_connections(kind="inet")
        #result['boot_time'] = psutil.boot_time()
        s.wfile.write(json.dumps(result, indent=2))

    def do_GET(s):
        """Respond to a GET request."""
        s.send_response(200)
        s.send_header("Content-type", "text/html")
        s.end_headers()
        generated_text = "在線人數：%d (上限：%d)" % (clientManager.count(), MAX_CLIENT_LIMIT)
        s.wfile.write(open("index.html").read().replace("TERMS_TEXT", open("terms.txt").read()).replace("SERVER_URL", SERVER_URL).replace("GENERATED_TEXT", generated_text))

    def do_POST(s):

        data = cgi.FieldStorage(fp=s.rfile, headers=s.headers, environ={"REQUEST_METHOD": "POST"})

        if "password" in data and data["password"].value == ADMIN_PASSWORD:
            return s.do_GetStatus()

        if "twosentences" not in data or not data["twosentences"].value:
            s.send_response(303)
            s.send_header("Location", SERVER_URL)
            s.end_headers()
            return

        try:
            arp = subprocess.check_output("./lookup_mac " + " %s" % s.client_address[0], shell=True).strip()
        except Exception:
            arp = ""

        s.send_response(200)
        s.send_header("Content-type", "text/html")
        s.end_headers()
        s.wfile.write(open("header.html").read())

        if arp == "":
            s.wfile.write("Invalid IP address")
            return
        else:
            twosentences = data["twosentences"].value.strip()
            LOG("Client: %s %s requested access" % (arp, s.client_address[0]))
            LOG("Two Sentences: " + twosentences + "\n")

        s.wfile.write("""<a href="http://www.google.com">繼續</a>""")
        clientManager.add(arp, s.client_address[0])

if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)
    print time.asctime(), "Server Starts - %s:%s" % (HOST_NAME, PORT_NUMBER)
    try:
        timer = threading.Timer(60, clientManager.gc)
        timer.start()
        httpd.serve_forever()
    except KeyboardInterrupt:
        timer.cancel()
        os.kill(os.getpid(), 9)
    httpd.server_close()
    print time.asctime(), "Server Stops - %s:%s" % (HOST_NAME, PORT_NUMBER)

